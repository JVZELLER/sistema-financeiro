searchNodes=[{"doc":"Represents an Account type","ref":"Account.html","title":"Account","type":"module"},{"doc":"Create a new Account type. Examples iex&gt; Account.new(&quot;123&quot;, &quot;Ze Doe&quot;, 100, :BRL) %Account{code: &quot;123&quot;, owner: &quot;Ze Doe&quot;, balance: %Money{amount: 10000, currency: :BRL}}","ref":"Account.html#new/4","title":"Account.new/4","type":"function"},{"doc":"Update an account Examples: iex&gt; account = Account.new(&quot;123&quot;, &quot;Ze Doe&quot;, 100, :BRL) iex&gt; Account.update(account, %{owner: &quot;Zé Doe&quot;}) %Account{code: &quot;123&quot;, owner: &quot;Zé Doe&quot;, balance: %Money{amount: 10000, currency: :BRL}} iex&gt; Account.update(account, %{code: &quot;321&quot;, owner: &quot;Zeller&quot;}) %Account{code: &quot;321&quot;, owner: &quot;Zeller&quot;, balance: %Money{amount: 10000, currency: :BRL}}","ref":"Account.html#update/2","title":"Account.update/2","type":"function"},{"doc":"Represents a Currency type accordingly to ISO 4217","ref":"Currency.html","title":"Currency","type":"module"},{"doc":"Finds Currency from a given alpha_code Examples: iex&gt; Currency.find(:BRL) %Currency{alpha_code: &quot;BRL&quot;, exponent: 2, name: &quot;Brazilian Real&quot;, numeric_code: 986, symbol: &quot;R$&quot;} iex&gt; Currency.find(:usd) %Currency{alpha_code: &quot;USD&quot;, exponent: 2, name: &quot;US Dollar&quot;, numeric_code: 840, symbol: &quot;$&quot;} iex&gt; Currency.find(:LBR) nil","ref":"Currency.html#find/1","title":"Currency.find/1","type":"function"},{"doc":"Finds Currency from a given alpha_code Examples: iex&gt; Currency.find!(:BRL) %Currency{alpha_code: &quot;BRL&quot;, exponent: 2, name: &quot;Brazilian Real&quot;, numeric_code: 986, symbol: &quot;R$&quot;} iex&gt; Currency.find!(:usd) %Currency{alpha_code: &quot;USD&quot;, exponent: 2, name: &quot;US Dollar&quot;, numeric_code: 840, symbol: &quot;$&quot;} iex&gt; Currency.find!(&quot;brl&quot;) %Currency{alpha_code: &quot;BRL&quot;, exponent: 2, name: &quot;Brazilian Real&quot;, numeric_code: 986, symbol: &quot;R$&quot;} iex&gt; Currency.find!(86) ** (ArgumentError) &quot;86&quot; must be atom or string","ref":"Currency.html#find!/1","title":"Currency.find!/1","type":"function"},{"doc":"Returns Currency exponent Examples: iex&gt; Currency.get_factor(Currency.find!(:BRL)) 100","ref":"Currency.html#get_factor/1","title":"Currency.get_factor/1","type":"function"},{"doc":"Returns the alpha_code represented as an atom Examples: iex&gt; Currency.to_atom(Currency.find!(:JPY)) :JPY","ref":"Currency.html#to_atom/1","title":"Currency.to_atom/1","type":"function"},{"doc":"Represents a Money type, inspired in Martin Fowler&#39;s Money Patter","ref":"Money.html","title":"Money","type":"module"},{"doc":"Raises different currencies exception Examples: iex&gt; Money.add(Money.new(10), Money.new(10, :USD)) ** (ArgumentError) Monies with different currencies. Got BRL and USD","ref":"Money.html#add/2","title":"Money.add/2","type":"function"},{"doc":"Divides Money from a given a denominator Examples: iex&gt; Money.divide(Money.new(10), 2) [%Money{amount: 500, currency: :BRL}, %Money{amount: 500, currency: :BRL}] iex&gt; Money.divide(Money.new(9), 3) [%Money{amount: 300, currency: :BRL}, %Money{amount: 300, currency: :BRL}, %Money{amount: 300, currency: :BRL}] iex&gt; Money.divide(Money.new(9, :USD), 1) [%Money{amount: 900, currency: :USD}] iex&gt; Money.divide(Money.new(5), &quot;2&quot;) ** (ArgumentError) Value &quot;2&quot; must be integer","ref":"Money.html#divide/2","title":"Money.divide/2","type":"function"},{"doc":"Multiplies Money by amount Examples: iex&gt; Money.multiply(Money.new(15, :USD), 2) %Money{amount: 3000, currency: :USD} iex&gt; Money.multiply(Money.new(750, :JPY), 3.5) %Money{amount: 2625, currency: :JPY} iex&gt; Money.multiply(Money.new(750), &quot;3.5&quot;) ** (ArgumentError) Value &quot;3.5&quot; must be integer or float","ref":"Money.html#multiply/2","title":"Money.multiply/2","type":"function"},{"doc":"Multiplies Money by amount and create a new one with a given Currency Examples: iex&gt; Money.multiply(Money.new(15), 2, :USD) %Money{amount: 3000, currency: :USD} iex&gt; Money.multiply(Money.new(750, :USD), 3.5, :JPY) %Money{amount: 2625, currency: :JPY}","ref":"Money.html#multiply/3","title":"Money.multiply/3","type":"function"},{"doc":"Creates a new Money type with amount and currency: Default currency is :BRL Examples: iex&gt; Money.new(5) %Money{amount: 500, currency: :BRL} iex&gt; Money.new(5, :USD) %Money{amount: 500, currency: :USD} iex&gt; Money.new(5.78, :USD) %Money{amount: 578, currency: :USD} iex&gt; Money.new(5, &quot;USD&quot;) %Money{amount: 500, currency: :USD} iex&gt; Money.new(5, &quot;usd&quot;) %Money{amount: 500, currency: :USD} iex&gt; Money.new(5, &quot;new_currency&quot;) {:error, &quot;Currency NEW_CURRENCY not found&quot;}","ref":"Money.html#new/2","title":"Money.new/2","type":"function"},{"doc":"Creates a new Money type with amount and currency: Default currency is :BRL Examples: iex&gt; Money.new!(5) %Money{amount: 500, currency: :BRL} iex&gt; Money.new!(5, :USD) %Money{amount: 500, currency: :USD} iex&gt; Money.new!(5.78, :USD) iex&gt; Money.new!(5, &quot;new_currency&quot;) ** (ArgumentError) Currency NEW_CURRENCY not found","ref":"Money.html#new!/2","title":"Money.new!/2","type":"function"},{"doc":"Parse an amount to Money Examples: iex&gt; Money.parse(&quot;12&quot;) %Money{amount: 1200, currency: :BRL} iex&gt; Money.parse(&quot;0,1&quot;) %Money{amount: 10, currency: :BRL} iex&gt; Money.parse(&quot;12aa&quot;, :USD) {:error, &quot;Cannot parse value \\&quot;12aa\\&quot;&quot;}","ref":"Money.html#parse/2","title":"Money.parse/2","type":"function"},{"doc":"Parse an amount value to Money. Raises an error if the value is not a number Examples: iex&gt; Money.parse!(&quot;12&quot;) %Money{amount: 1200, currency: :BRL} iex&gt; Money.parse!(&quot;0.1&quot;, :USD) %Money{amount: 10, currency: :USD} iex&gt; Money.parse!(&quot;0,1&quot;) %Money{amount: 10, currency: :BRL} iex&gt; Money.parse!(&quot;bad&quot;, :USD) ** (ArgumentError) Cannot parse value &quot;bad&quot;","ref":"Money.html#parse!/2","title":"Money.parse!/2","type":"function"},{"doc":"Converts Money to formated string with properly symbol and number of decimal cases Examples: iex&gt; Money.to_string(Money.new(4)) &quot;R$ 4.00&quot; iex&gt; Money.to_string(Money.new(25, :USD)) &quot;$ 25.00&quot;","ref":"Money.html#to_string/1","title":"Money.to_string/1","type":"function"},{"doc":"Defines a common behaviour to Repository implementations","ref":"Repository.html","title":"Repository","type":"behaviour"},{"doc":"Gets all data","ref":"Repository.html#c:all/0","title":"Repository.all/0","type":"callback"},{"doc":"Finds account by code","ref":"Repository.html#c:find/1","title":"Repository.find/1","type":"callback"},{"doc":"Provides in memory accounts data","ref":"Repository.Account.InMemoryDatabase.html","title":"Repository.Account.InMemoryDatabase","type":"module"},{"doc":"In memory data to simulate an API or Database data ## Examples: iex&gt; Repository.Account.InMemoryDatabase.all_data() [ Account.new(&quot;1&quot;, &quot;Zé Doe&quot;, 50, :BRL), Account.new(&quot;2&quot;, &quot;Zeller Doe&quot;, 50, :BRL), Account.new(&quot;3&quot;, &quot;Ann Doe&quot;, 25, :USD), Account.new(&quot;4&quot;, &quot;Smith Doe&quot;, 100, :USD), Account.new(&quot;5&quot;, &quot;Xang Doe&quot;, 25, :USD), Account.new(&quot;6&quot;, &quot;Zang Doe&quot;, 50, :JPY), Account.new(&quot;7&quot;, &quot;Xan Jack&quot;, 25, :JPY) ]","ref":"Repository.Account.InMemoryDatabase.html#all_data/0","title":"Repository.Account.InMemoryDatabase.all_data/0","type":"function"},{"doc":"Manipulate Accounts data, isolating the persistence layer","ref":"Repository.AccountRepository.html","title":"Repository.AccountRepository","type":"module"},{"doc":"Returns all accounts data Examples: iex&gt; Repository.AccountRepository.all() { :ok, [ Account.new(&quot;1&quot;, &quot;Zé Doe&quot;, 50, :BRL), Account.new(&quot;2&quot;, &quot;Zeller Doe&quot;, 50, :BRL), Account.new(&quot;3&quot;, &quot;Ann Doe&quot;, 25, :USD), Account.new(&quot;4&quot;, &quot;Smith Doe&quot;, 100, :USD), Account.new(&quot;5&quot;, &quot;Xang Doe&quot;, 25, :USD), Account.new(&quot;6&quot;, &quot;Zang Doe&quot;, 50, :JPY), Account.new(&quot;7&quot;, &quot;Xan Jack&quot;, 25, :JPY) ] }","ref":"Repository.AccountRepository.html#all/0","title":"Repository.AccountRepository.all/0","type":"function"},{"doc":"Finds account by a given account&#39;s code Examples: iex&gt; Repository.AccountRepository.find(&quot;1&quot;) { :ok, %Account{ balance: %Money{amount: 5000, currency: :BRL}, code: &quot;1&quot;, owner: &quot;Zé Doe&quot; } } iex&gt; Repository.AccountRepository.find(&quot;7&quot;) { :ok, %Account{ balance: %Money{amount: 25, currency: :JPY}, code: &quot;7&quot;, owner: &quot;Xan Jack&quot; } } iex&gt; Repository.AccountRepository.find(&quot;778&quot;) {:ok, nil}","ref":"Repository.AccountRepository.html#find/1","title":"Repository.AccountRepository.find/1","type":"function"},{"doc":"Provides in memory Currency data","ref":"Repository.Currency.InMemoryDatabase.html","title":"Repository.Currency.InMemoryDatabase","type":"module"},{"doc":"In memory data to simulate data from API or Database Examples: iex&gt; Repository.Currency.InMemoryDatabase.all_data() %{ BRL: %Currency{ alpha_code: &quot;BRL&quot;, numeric_code: 986, exponent: 2, name: &quot;Brazilian Real&quot;, symbol: &quot;R$&quot; }, USD: %Currency{ alpha_code: &quot;USD&quot;, numeric_code: 840, exponent: 2, name: &quot;US Dollar&quot;, symbol: &quot;$&quot; }, CNY: %Currency{ alpha_code: &quot;CNY&quot;, numeric_code: 156, exponent: 2, name: &quot;Yuan Renminbi&quot;, symbol: &quot;¥&quot; }, JPY: %Currency{ alpha_code: &quot;JPY&quot;, numeric_code: 392, exponent: 0, name: &quot;Yen&quot;, symbol: &quot;¥&quot; } }","ref":"Repository.Currency.InMemoryDatabase.html#all_data/0","title":"Repository.Currency.InMemoryDatabase.all_data/0","type":"function"},{"doc":"Fetch Currency data","ref":"Repository.CurrencyRepository.html","title":"Repository.CurrencyRepository","type":"module"},{"doc":"Returns all currencies data Exmaples: iex&gt; Repository.CurrencyRepository.all() { :ok, %{ BRL: %Currency{ alpha_code: &quot;BRL&quot;, exponent: 2, name: &quot;Brazilian Real&quot;, numeric_code: 986, symbol: &quot;R$&quot; }, CNY: %Currency{ alpha_code: &quot;CNY&quot;, exponent: 2, name: &quot;Yuan Renminbi&quot;, numeric_code: 156, symbol: &quot;¥&quot; }, JPY: %Currency{ alpha_code: &quot;JPY&quot;, exponent: 0, name: &quot;Yen&quot;, numeric_code: 392, symbol: &quot;¥&quot; }, USD: %Currency{ alpha_code: &quot;USD&quot;, exponent: 2, name: &quot;US Dollar&quot;, numeric_code: 840, symbol: &quot;$&quot; } } }","ref":"Repository.CurrencyRepository.html#all/0","title":"Repository.CurrencyRepository.all/0","type":"function"},{"doc":"Returns Currency from a given Currency code Not implemented","ref":"Repository.CurrencyRepository.html#find/1","title":"Repository.CurrencyRepository.find/1","type":"function"},{"doc":"Provides in memory accounts data. Data from XE Currency Converter","ref":"Repository.ExchangeRate.InMemoryDatabase.html","title":"Repository.ExchangeRate.InMemoryDatabase","type":"module"},{"doc":"Provides in memory ExchangeRate data to ease the tests and to exchange operations Examples: iex&gt; Repository.ExchangeRate.InMemoryDatabase.all_data() [ %{rate: 5.31726, from: &quot;USD&quot;, to: &quot;BRL&quot;}, %{rate: 0.188088, from: &quot;BRL&quot;, to: &quot;USD&quot;}, %{rate: 107.755, from: &quot;USD&quot;, to: &quot;JPY&quot;}, %{rate: 0.00928031, from: &quot;JPY&quot;, to: &quot;USD&quot;}, %{rate: 20.2671, from: &quot;BRL&quot;, to: &quot;JPY&quot;}, %{rate: 0.0493412, from: &quot;JPY&quot;, to: &quot;BRL&quot;} ]","ref":"Repository.ExchangeRate.InMemoryDatabase.html#all_data/0","title":"Repository.ExchangeRate.InMemoryDatabase.all_data/0","type":"function"},{"doc":"Fetchs exchange Rate data. It could get the data from database, call an API or even read from a file.","ref":"Repository.ExchangeRateRepository.html","title":"Repository.ExchangeRateRepository","type":"module"},{"doc":"Gets all data Examples: iex&gt; Repository.ExchangeRateRepository.all() { :ok, [ %{from: &quot;USD&quot;, rate: 5.31726, to: &quot;BRL&quot;}, %{from: &quot;BRL&quot;, rate: 0.188088, to: &quot;USD&quot;}, %{from: &quot;USD&quot;, rate: 107.755, to: &quot;JPY&quot;}, %{from: &quot;JPY&quot;, rate: 0.00928031, to: &quot;USD&quot;}, %{from: &quot;BRL&quot;, rate: 20.2671, to: &quot;JPY&quot;}, %{from: &quot;JPY&quot;, rate: 0.0493412, to: &quot;BRL&quot;} ] }","ref":"Repository.ExchangeRateRepository.html#all/0","title":"Repository.ExchangeRateRepository.all/0","type":"function"},{"doc":"Finds ExchangeRate data from a given to and from parameter. Examples: iex&gt; Repository.ExchangeRateRepository.find(%{to: &quot;USD&quot;, from: &quot;BRL&quot;}) {:ok, %{from: &quot;BRL&quot;, rate: 0.188088, to: &quot;USD&quot;}} iex&gt; Repository.ExchangeRateRepository.find(%{to: &quot;JPY&quot;, from: &quot;BRL&quot;}) {:ok, %{from: &quot;BRL&quot;, rate: 20.2671, to: &quot;JPY&quot;}} iex&gt; Repository.ExchangeRateRepository.find(%{to: &quot;BLA&quot;, from: &quot;BRL&quot;}) {:ok, nil}","ref":"Repository.ExchangeRateRepository.html#find/1","title":"Repository.ExchangeRateRepository.find/1","type":"function"},{"doc":"Core module of the app where you can start the application and play around with the Accounts","ref":"SistemaFinanceiro.html","title":"SistemaFinanceiro","type":"module"},{"doc":"Starts the app by listing all accounts Examples iex&gt; SistemaFinanceiro.start() ################################ Accounts ################################ Code Owner Balance 1 Zé Doe R$ 50.00 2 Zeller Doe R$ 50.00 3 Ann Doe $ 25.00 4 Smith Doe $ 100.00 5 Xang Doe $ 25.00 6 Zang Doe ¥ 50 7 Xan Jack ¥ 25 (L)ist Accounts (S)plit Money (E)xchange (Q)uit:","ref":"SistemaFinanceiro.html#start/0","title":"SistemaFinanceiro.start/0","type":"function"},{"doc":"A lightfull service to orchestrate incoming calls/requests actions from our controller","ref":"SistemaFinanceiro.AccountService.html","title":"SistemaFinanceiro.AccountService","type":"module"},{"doc":"","ref":"SistemaFinanceiro.AccountService.html#exchange_money/2","title":"SistemaFinanceiro.AccountService.exchange_money/2","type":"function"},{"doc":"Lists all accounts Examples: iex&gt; SistemaFinanceiro.AccountService.list() { :ok, [ Account.new(&quot;1&quot;, &quot;Zé Doe&quot;, 50, :BRL), Account.new(&quot;2&quot;, &quot;Zeller Doe&quot;, 50, :BRL), Account.new(&quot;3&quot;, &quot;Ann Doe&quot;, 25, :USD), Account.new(&quot;4&quot;, &quot;Smith Doe&quot;, 100, :USD), Account.new(&quot;5&quot;, &quot;Xang Doe&quot;, 25, :USD), Account.new(&quot;6&quot;, &quot;Zang Doe&quot;, 50, :JPY), Account.new(&quot;7&quot;, &quot;Xan Jack&quot;, 25, :JPY) ] }","ref":"SistemaFinanceiro.AccountService.html#list/0","title":"SistemaFinanceiro.AccountService.list/0","type":"function"},{"doc":"Splits Money into accounts given an amount and ratios Examples: iex&gt; SistemaFinanceiro.AccountService.split_money([&quot;1&quot;, &quot;5&quot;], &quot;0.05&quot;, [3,7]) {:error, &quot;Monies with different currencies. Got USD and BRL&quot;} iex&gt; SistemaFinanceiro.AccountService.split_money([&quot;1&quot;, &quot;2&quot;], &quot;0.05&quot;, [3,7]) {:ok, [ %Account{ balance: %Money{amount: 5002, currency: :BRL}, code: &quot;1&quot;, owner: &quot;Zé Doe&quot; }, %Account{ balance: %Money{amount: 5003, currency: :BRL}, code: &quot;2&quot;, owner: &quot;Zeller Doe&quot; } ] }","ref":"SistemaFinanceiro.AccountService.html#split_money/3","title":"SistemaFinanceiro.AccountService.split_money/3","type":"function"},{"doc":"A controller to receive incoming calls/requests from our view, parse/adapt the data if necessary and bypass to the service layer","ref":"SistemaFinanceiro.Controller.html","title":"SistemaFinanceiro.Controller","type":"module"},{"doc":"","ref":"SistemaFinanceiro.Controller.html#exchange_money/2","title":"SistemaFinanceiro.Controller.exchange_money/2","type":"function"},{"doc":"","ref":"SistemaFinanceiro.Controller.html#list_accounts/0","title":"SistemaFinanceiro.Controller.list_accounts/0","type":"function"},{"doc":"","ref":"SistemaFinanceiro.Controller.html#split_money/3","title":"SistemaFinanceiro.Controller.split_money/3","type":"function"},{"doc":"SistemaFinanceiro","ref":"readme.html","title":"SistemaFinanceiro","type":"extras"},{"doc":"O sistema permite as seguintes operações: &#39;Split&#39; de dinheiro entre contas bancárias; Conversões de Câmbio de contas bancárias. Para executar o sistema abra um terminal no diretório da pasta do projeto e execute: $ iex -S mix iex(1)&gt; SistemaFinanceiro.start() Para executar os testes, execute: $ mix test Para gerar documentação: $ mix docs E depois acesse doc/index.html.","ref":"readme.html#para-gerenciar-transa%C3%A7%C3%B5es-financeiras-entre-contas-banc%C3%A1rias","title":"SistemaFinanceiro - Para gerenciar transações financeiras entre contas bancárias","type":"extras"},{"doc":"Elixir ~&gt; 1.10 Mix Credo ~&gt; 1.2 Ex_doc ~&gt; 0.21 GitHub Actions","ref":"readme.html#tecnologias","title":"SistemaFinanceiro - Tecnologias","type":"extras"},{"doc":"De todos os módulos do projeto, dois merecem atenção especial: Money Currency Estes dois módulos representam &quot;Dinheiro&quot; e &quot;Moeda respectivamente, e foram desenvolvidos a fim de abstrair essas duas entidades do mundo real e contornar os problemas ao manipular valores monetarios computacionalmente.","ref":"readme.html#m%C3%B3dulos-espec%C3%ADficos","title":"SistemaFinanceiro - Módulos Específicos","type":"extras"},{"doc":"O sistema baseia-se em uma arquiterua MVC com algumas modificações e camadas extras. Nossa view é representada pelo módulo SistemaFinanceiro, cuja responsabilidade é exibir os dados aos usuários. Para a execução de uma operação, a view captura os dados necessários e realiza uma chamada para a controller (módulo SistemaFinanceiro.Controller). A controller simplesmente repassa as requisições que nela chegam para a camada de serviço (módulo SistemaFinanceiro.AccountService) que se encarrega de validar os dados e executar a ação requisitada. A nossa service consulta os dados da aplicação através da camada de repositórios (módulos Repository.AccountRepository, Repository.CurrencyRepository e Repository.ExchangeRateRepository). Os dados estão armazenados em memória (módulos InMemoryDatabase) e definidos nas configurações de acordo com o ambiente que o sistema está sendo executado (PRD, TEST ou DEV). Cada repositório, antes de realizar suas operações verifica qual tipo de database deve usar de acordo com o ambiente, deixando assim uma forma flexível para novas implementações de consultas em diferentes bancos de dados.","ref":"readme.html#arquitetura","title":"SistemaFinanceiro - Arquitetura","type":"extras"}]